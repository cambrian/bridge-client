"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const streams_1 = require("@src/streams");
const chai_1 = require("chai");
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
async function demo(push, close) {
    await sleep(10);
    push(1);
    await sleep(10);
    push(2);
    await sleep(10);
    push(3);
    await sleep(10);
    push(4);
    await sleep(10);
    close();
}
async function errorDemo(push, error, close) {
    await sleep(10);
    push(1);
    await sleep(10);
    push(2);
    await sleep(10);
    error(new Error('unknown'));
    await sleep(10);
    push(4);
    await sleep(10);
    close();
}
describe('held push stream (tests are flaky)', () => {
    it('should return all demo values if bound immediately', async () => {
        const [push, , close, stream] = streams_1.heldPushStream();
        demo(push, close);
        const result = await streams_1.toList(stream);
        chai_1.expect(result).to.deep.equal([1, 2, 3, 4]);
    });
    it('should return some demo values if bound later on', async () => {
        const [push, , close, stream] = streams_1.heldPushStream();
        demo(push, close);
        await sleep(38);
        const result = await streams_1.toList(stream);
        chai_1.expect(result).to.deep.equal([3, 4]);
    });
    it('should return last demo value if bound at the end', async () => {
        const [push, , close, stream] = streams_1.heldPushStream();
        demo(push, close);
        await sleep(60);
        const result = await streams_1.toList(stream);
        chai_1.expect(result).to.deep.equal([4]);
    });
    it('should return first errorDemo values if bound immediately', async () => {
        const [push, error, close, stream] = streams_1.heldPushStream();
        errorDemo(push, error, close);
        const results = [];
        try {
            await streams_1.observe(value => results.push(value), stream);
            chai_1.expect(false).to.equal(true); // Unreachable (should throw).
        }
        catch (_a) {
            chai_1.expect(results).to.deep.equal([1, 2]);
        }
    });
    it('should return second errorDemo value if bound later', async () => {
        const [push, error, close, stream] = streams_1.heldPushStream();
        errorDemo(push, error, close);
        await sleep(28);
        const results = [];
        try {
            await streams_1.observe(value => results.push(value), stream);
            chai_1.expect(false).to.equal(true); // Unreachable (should throw).
        }
        catch (_a) {
            chai_1.expect(results).to.deep.equal([2]);
        }
    });
    it('should return no errorDemo values if bound at the end', async () => {
        const [push, error, close, stream] = streams_1.heldPushStream();
        errorDemo(push, error, close);
        await sleep(60);
        const results = [];
        try {
            await streams_1.observe(value => results.push(value), stream);
            chai_1.expect(false).to.equal(true); // Unreachable (should throw).
        }
        catch (_a) {
            chai_1.expect(results).to.deep.equal([]);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3Qvc3RyZWFtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBDQUE4RDtBQUU5RCwrQkFBNkI7QUFFN0IsU0FBUyxLQUFLLENBQUUsRUFBVTtJQUN4QixPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ3hELENBQUM7QUFFRCxLQUFLLFVBQVUsSUFBSSxDQUFFLElBQTZCLEVBQUUsS0FBaUI7SUFDbkUsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDUCxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNQLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ1AsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDUCxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNmLEtBQUssRUFBRSxDQUFBO0FBQ1QsQ0FBQztBQUVELEtBQUssVUFBVSxTQUFTLENBQ3RCLElBQTZCLEVBQzdCLEtBQWtDLEVBQ2xDLEtBQWlCO0lBRWpCLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ1AsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDUCxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNmLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0lB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