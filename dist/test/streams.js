"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const streams_1 = require("@src/streams");
const chai_1 = require("chai");
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
async function demo(push, close) {
    await sleep(10);
    push(1);
    await sleep(10);
    push(2);
    await sleep(10);
    push(3);
    await sleep(10);
    push(4);
    await sleep(10);
    close();
}
async function errorDemo(push, error, close) {
    await sleep(10);
    push(1);
    await sleep(10);
    push(2);
    await sleep(10);
    error(new Error('unknown'));
    await sleep(10);
    push(4);
    await sleep(10);
    close();
}
describe('held push stream (tests are flaky)', () => {
    it('should return all demo values if bound immediately', async () => {
        const [push, , close, stream] = streams_1.heldPushStream();
        demo(push, close);
        const result = await streams_1.toList(stream);
        chai_1.expect(result).to.deep.equal([1, 2, 3, 4]);
    });
    it('should return some demo values if bound later on', async () => {
        const [push, , close, stream] = streams_1.heldPushStream();
        demo(push, close);
        await sleep(38);
        const result = await streams_1.toList(stream);
        chai_1.expect(result).to.deep.equal([3, 4]);
    });
    it('should return last demo value if bound at the end', async () => {
        const [push, , close, stream] = streams_1.heldPushStream();
        demo(push, close);
        await sleep(60);
        const result = await streams_1.toList(stream);
        chai_1.expect(result).to.deep.equal([4]);
    });
    it('should return first errorDemo values if bound immediately', async () => {
        const [push, error, close, stream] = streams_1.heldPushStream();
        errorDemo(push, error, close);
        const results = [];
        try {
            await streams_1.observe(value => results.push(value), stream);
            chai_1.expect(false).to.equal(true); // Unreachable (should throw).
        }
        catch (_a) {
            chai_1.expect(results).to.deep.equal([1, 2]);
        }
    });
    it('should return second errorDemo value if bound later', async () => {
        const [push, error, close, stream] = streams_1.heldPushStream();
        errorDemo(push, error, close);
        await sleep(28);
        const results = [];
        try {
            await streams_1.observe(value => results.push(value), stream);
            chai_1.expect(false).to.equal(true); // Unreachable (should throw).
        }
        catch (_a) {
            chai_1.expect(results).to.deep.equal([2]);
        }
    });
    it('should return no errorDemo values if bound at the end', async () => {
        const [push, error, close, stream] = streams_1.heldPushStream();
        errorDemo(push, error, close);
        await sleep(60);
        const results = [];
        try {
            await streams_1.observe(value => results.push(value), stream);
            chai_1.expect(false).to.equal(true); // Unreachable (should throw).
        }
        catch (_a) {
            chai_1.expect(results).to.deep.equal([]);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3Qvc3RyZWFtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGFBQWE7QUFDYiwwQ0FBOEQ7QUFFOUQsK0JBQTZCO0FBRTdCLFNBQVMsS0FBSyxDQUFFLEVBQVU7SUFDeEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN4RCxDQUFDO0FBRUQsS0FBSyxVQUFVLElBQUksQ0FBRSxJQUE2QixFQUFFLEtBQWlCO0lBQ25FLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ1AsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDUCxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNQLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ1AsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixLQUFLLEVBQUUsQ0FBQTtBQUNULENBQUM7QUFFRCxLQUFLLFVBQVUsU0FBUyxDQUN0QixJQUE2QixFQUM3QixLQUFrQyxFQUNsQyxLQUFpQjtJQUVqQixNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNQLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ1AsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLENB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