"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Not an actual test, but good to make sure this works when updating types.
const WebSocket = require("ws");
const _src_1 = require("@src");
async function makeSocket() {
    return new Promise((resolve, _) => {
        const ws = new WebSocket('http://127.0.0.1:3000');
        ws.on('open', () => resolve(ws));
    });
}
async function run() {
    const ws = await makeSocket();
    const client = _src_1.BridgeClient.make(ws);
    // Second parameter is your desired timeout.
    // AddInts and EchoThrice have a built-in 250 ms server-side delay.
    const result = await _src_1.Call.DummyManager.addInts(client, undefined, { a: 3, b: 4 });
    console.log(result); // Output: 7
    try {
        const result = await _src_1.Call.DummyManager.addInts(client, 100, { a: 3, b: 4 });
        console.log(result);
    }
    catch (exception) {
        console.log(exception.message); // Output: request timed out (100)
    }
    const stream = await _src_1.Call.DummyManager.echoThrice(client, undefined, 1337);
    await _src_1.observe(console.log, stream); // Output: 1337 (x3)
    try {
        const stream = await _src_1.Call.DummyManager.echoThrice(client, 100, 1337);
        await _src_1.observe(console.log, stream);
    }
    catch (exception) {
        console.log(exception.message); // Output: request timed out (100)
    }
    const fizzBuzz = { a: 'Fizz', b: 'Buzz' };
    const result2 = await _src_1.Call.DummyManager.concatTextAuth(client, undefined, 'Token', fizzBuzz);
    console.log(result2); // Output: { result: 'FizzBuzz' }
    const stream2 = await _src_1.Call.DummyManager.echoThriceAuth(client, undefined, 'Token', '1337');
    await _src_1.observe(console.log, stream2); // Output: '1337' (x3)
    ws.close();
}
run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvZXhhbXBsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRFQUE0RTtBQUM1RSxnQ0FBK0I7QUFFL0IsK0JBQTBEO0FBRTFELEtBQUssVUFBVSxVQUFVO0lBQ3ZCLE9BQU8sSUFBSSxPQUFPLENBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqRCxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNsQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFFRCxLQUFLLFVBQVUsR0FBRztJQUNoQixNQUFNLEVBQUUsR0FBRyxNQUFNLFVBQVUsRUFBRSxDQUFBO0lBQzdCLE1BQU0sTUFBTSxHQUFHLG1CQUFZLENBQUMsSUFBSSxDQUFzQixFQUFFLENBQUMsQ0FBQTtJQUV6RCw0Q0FBNEM7SUFDNUMsbUVBQW1FO0lBQ25FLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDakYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLFlBQVk7SUFFaEMsSUFBSTtRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDM0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtLQUNwQjtJQUFDLE9BQU8sU0FBUyxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsa0NBQWtDO0tBQ2xFO0lBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxXQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzFFLE1BQU0sY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUEsQ0FBQyxvQkFBb0I7SUFFdkQsSUFBSTtRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNwRSxNQUFNLGNBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0tBQ25DO0lBQUMsT0FBTyxTQUFTLEVBQUU7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyxrQ0FBa0M7S0FDbEU7SUFFRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFBO0lBQ3pDLE1BQU0sT0FBTyxHQUFHLE1BQU0sV0FBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDNUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLGlDQUFpQztJQUV0RCxNQUFNLE9BQU8sR0FBRyxNQUFNLFdBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzFGLE1BQU0sY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUEsQ0FBQyxzQkFBc0I7SUFDMUQsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFBO0FBQ1osQ0FBQztBQUVELEdBQUcsRUFBRSxDQUFBIn0=