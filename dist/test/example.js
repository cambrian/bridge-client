"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Not an actual test, but good to make sure this works when updating types.
const WebSocket = require("ws");
const _src_1 = require("@src");
async function makeSocket() {
    return new Promise((resolve, _) => {
        const ws = new WebSocket('http://127.0.0.1:3000');
        ws.on('open', () => resolve(ws));
    });
}
async function run() {
    const ws = await makeSocket();
    const client = _src_1.BridgeClient.make(ws);
    const result = await _src_1.Call.DummyManager.addInts(client, { a: 3, b: 4 });
    console.log(result); // Output: 7
    try {
        const result = await _src_1.Call.DummyManager.addIntsBad(client, { a: 3, b: 4 });
        console.log(result);
    }
    catch (exception) {
        console.log(exception.message); // Output: [server] request timed out (1)
    }
    const stream = _src_1.Call.DummyManager.echoThrice(client, 1337);
    await _src_1.observe(console.log, stream); // Output: 1337, 1338, 1339
    try {
        const stream = _src_1.Call.DummyManager.echoThriceBad(client, 1337);
        await _src_1.observe(console.log, stream);
    }
    catch (exception) {
        console.log(exception.message); // Output: [server] request timed out (1)
    }
    const fizzBuzz = { a: 'Fizz', b: 'Buzz' };
    const resultAuth = await _src_1.Call.DummyManager.concatTextAuth(client, 'Token', fizzBuzz);
    console.log(resultAuth); // Output: { result: 'FizzBuzz' }
    const streamAuth = _src_1.Call.DummyManager.echoThriceAuth(client, 'Token', '1337');
    await _src_1.observe(console.log, streamAuth); // Output: '1337' (x1)
    const voidResult = await _src_1.Call.DummyManager.getVoid(client);
    console.log(voidResult); // Output: undefined (x1)
    const voidStream = _src_1.Call.DummyManager.getVoidStream(client);
    await _src_1.observe(console.log, voidStream); // Output: undefined (x1)
    ws.close();
}
run().catch(console.log);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvZXhhbXBsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRFQUE0RTtBQUM1RSxnQ0FBK0I7QUFFL0IsK0JBQTBEO0FBRTFELEtBQUssVUFBVSxVQUFVO0lBQ3ZCLE9BQU8sSUFBSSxPQUFPLENBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDM0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNqRCxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNsQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFFRCxLQUFLLFVBQVUsR0FBRztJQUNoQixNQUFNLEVBQUUsR0FBRyxNQUFNLFVBQVUsRUFBRSxDQUFBO0lBQzdCLE1BQU0sTUFBTSxHQUFHLG1CQUFZLENBQUMsSUFBSSxDQUFzQixFQUFFLENBQUMsQ0FBQTtJQUV6RCxNQUFNLE1BQU0sR0FBRyxNQUFNLFdBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLFlBQVk7SUFFaEMsSUFBSTtRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN6RSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQ3BCO0lBQUMsT0FBTyxTQUFTLEVBQUU7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQyx5Q0FBeUM7S0FDekU7SUFFRCxNQUFNLE1BQU0sR0FBRyxXQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDekQsTUFBTSxjQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQSxDQUFDLDJCQUEyQjtJQUU5RCxJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcsV0FBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzVELE1BQU0sY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUE7S0FDbkM7SUFBQyxPQUFPLFNBQVMsRUFBRTtRQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLHlDQUF5QztLQUN6RTtJQUVELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUE7SUFDekMsTUFBTSxVQUFVLEdBQUcsTUFBTSxXQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3BGLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQyxpQ0FBaUM7SUFFekQsTUFBTSxVQUFVLEdBQUcsV0FBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUM1RSxNQUFNLGNBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFBLENBQUMsc0JBQXNCO0lBRTdELE1BQU0sVUFBVSxHQUFHLE1BQU0sV0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDMUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFDLHlCQUF5QjtJQUVqRCxNQUFNLFVBQVUsR0FBRyxXQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUMxRCxNQUFNLGNBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFBLENBQUMseUJBQXlCO0lBQ2hFLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtBQUNaLENBQUM7QUFFRCxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBIn0=