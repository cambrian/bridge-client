"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Not an actual test, but good to make sure this works when updating types.
const WebSocket = require("isomorphic-ws");
const _src_1 = require("@src");
async function makeSocket() {
    return new Promise((resolve, _) => {
        const ws = new WebSocket('http://127.0.0.1:3000');
        ws.on('open', () => resolve(ws));
    });
}
async function run() {
    const ws = await makeSocket();
    const client = _src_1.BridgeClient.make(ws);
    const result = await _src_1.DummyManager.addInts(client, { a: 3, b: 4 });
    console.log(result); // Output: 7
    try {
        const result = await _src_1.DummyManager.addIntsBad(client, { a: 3, b: 4 });
        console.log(result);
    }
    catch (exception) {
        console.log(exception.message); // Output: [client] request timed out (1)
    }
    const stream = _src_1.DummyManager.echoThrice(client, 1337);
    await _src_1.observe(console.log, stream); // Output: 1337, 1338, 1339
    try {
        const stream = _src_1.DummyManager.echoThriceBad(client, 1337);
        await _src_1.observe(console.log, stream);
    }
    catch (exception) {
        console.log(exception.message); // Output (usually): [client] request timed out (1)
    }
    const fizzBuzz = { a: 'Fizz', b: 'Buzz' };
    const resultAuth = await _src_1.DummyManager.concatTextAuth(client, 'Token', fizzBuzz);
    console.log(resultAuth); // Output: { result: 'FizzBuzz' }
    const streamAuth = _src_1.DummyManager.echoThriceAuth(client, 'Token', '1337');
    await _src_1.observe(console.log, streamAuth); // Output: '1337' (x1)
    const voidResult = await _src_1.DummyManager.getVoid(client);
    console.log(voidResult); // Output: undefined (x1)
    const voidStream = _src_1.DummyManager.getVoidStream(client);
    await _src_1.observe(console.log, voidStream); // Output: undefined (x1)
    ws.close();
}
run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVtbXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L2V4YW1wbGVzL2R1bW15LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNEVBQTRFO0FBQzVFLDJDQUEwQztBQUUxQywrQkFBa0U7QUFFbEUsS0FBSyxVQUFVLFVBQVU7SUFDdkIsT0FBTyxJQUFJLE9BQU8sQ0FBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMzQyxNQUFNLEVBQUUsR0FBRyxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1FBQ2pELEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELEtBQUssVUFBVSxHQUFHO0lBQ2hCLE1BQU0sRUFBRSxHQUFHLE1BQU0sVUFBVSxFQUFFLENBQUE7SUFDN0IsTUFBTSxNQUFNLEdBQUcsbUJBQVksQ0FBQyxJQUFJLENBQXNCLEVBQUUsQ0FBQyxDQUFBO0lBRXpELE1BQU0sTUFBTSxHQUFHLE1BQU0sbUJBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNqRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMsWUFBWTtJQUVoQyxJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxtQkFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3BFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7S0FDcEI7SUFBQyxPQUFPLFNBQVMsRUFBRTtRQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDLHlDQUF5QztLQUN6RTtJQUVELE1BQU0sTUFBTSxHQUFHLG1CQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNwRCxNQUFNLGNBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFBLENBQUMsMkJBQTJCO0lBRTlELElBQUk7UUFDRixNQUFNLE1BQU0sR0FBRyxtQkFBWSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDdkQsTUFBTSxjQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQTtLQUNuQztJQUFDLE9BQU8sU0FBUyxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUMsbURBQW1EO0tBQ25GO0lBRUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQTtJQUN6QyxNQUFNLFVBQVUsR0FBRyxNQUFNLG1CQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDL0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFDLGlDQUFpQztJQUV6RCxNQUFNLFVBQVUsR0FBRyxtQkFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3ZFLE1BQU0sY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUEsQ0FBQyxzQkFBc0I7SUFFN0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxtQkFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQUMseUJBQXlCO0lBRWpELE1BQU0sVUFBVSxHQUFHLG1CQUFZLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JELE1BQU0sY0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUEsQ0FBQyx5QkFBeUI7SUFDaEUsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFBO0FBQ1osQ0FBQztBQUVELEdBQUcsRUFBRSxDQUFBIn0=